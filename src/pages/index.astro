---
import "../css/style.css"

---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>PhatDeck</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Darumadrop+One&family=Love+Ya+Like+A+Sister&display=swap"
      rel="stylesheet"
    />
	
  </head>

  <body>
    <nav class="header flexgroup navsize">
      <div>
        <h1 class="header__title navsize__title"><a href="#">PHATDECK</a></h1>
      </div>

      <div class="menu flexgroup">
        <div class="menu__dropdown">
          <button class="menu__button buttonsize__dropdown">
            Card Background
          </button>
          <div class="menu__dropdown--content">
            <a class="menu__items" href="#">Sample 1</a>
            <a class="menu__items" href="#">Sample 2</a>
          </div>
        </div>

        <div class="menu__dropdown">
          <button class="menu__button buttonsize__dropdown">
            Theme Selector
          </button>
          <div class="menu__dropdown--content">
            <a class="menu__items" href="#">Sample 1</a>
            <a class="menu__items" href="#">Sample 2</a>
            <a class="menu__items" href="#">Sample 3</a>
          </div>
        </div>
      </div>
    </nav>

    <main class="game">
      <section class="centering flexgroup unselectable">
        <img
          class="game__helpicon unselectable"
          src="PhatDeck/img/question.png"
          alt="Help icon"
        />
        <p class="game__helptext">
          Pick up a card from the deck and drag it to the discard pile.
        </p>
      </section>

      <section class="centering flexgroup">
        <div class="game__deck">
          <p class="game__pilename unselectable">Deck</p>
          <div id="deck" class="game__piles">
            <img
              class="game__card"
              draggable="true"
              src="PhatDeck/img/card-back.png"
              alt="Back of the card"
            />
          </div>
        </div>

        <div class="game__discard">
          <p class="centering game__pilename unselectable">Discard Pile</p>
          <div id="discard" class="game__piles"></div>
        </div>
      </section>

      <section class="flexgroup centering">
        <button class="button">Reset</button>
      </section>
    </main>

    <footer class="footer">
      <div class="centering flexgroup">
        <div class="menu__button">
          <a
            class="footer__items"
            target="_blank"
            href="https://github.com/SpicoChicenk"
            >GitHub</a
          >
        </div>

        <div>
          <a
            class="footer__items"
            target="_blank"
            href="https://twitter.com/spicochicenk"
          >
            Twitter
          </a>
        </div>
      </div>
      <p class="footer__version">Current Version: v.0.9</p>
    </footer>

  </body>
</html>


<script is:inline>
	const defaultDeck = [
  "ace-spade.png",
  "2-spade.png",
  "3-spade.png",
  "4-spade.png",
  "5-spade.png",
  "6-spade.png",
  "7-spade.png",
  "8-spade.png",
  "9-spade.png",
  "10-spade.png",
  "jack-spade.png",
  "queen-spade.png",
  "king-spade.png",
  "ace-clover.png",
  "2-clover.png",
  "3-clover.png",
  "4-clover.png",
  "5-clover.png",
  "6-clover.png",
  "7-clover.png",
  "8-clover.png",
  "9-clover.png",
  "10-clover.png",
  "jack-clover.png",
  "queen-clover.png",
  "king-clover.png",
  "ace-diamonds.png",
  "2-diamonds.png",
  "3-diamonds.png",
  "4-diamonds.png",
  "5-diamonds.png",
  "6-diamonds.png",
  "7-diamonds.png",
  "8-diamonds.png",
  "9-diamonds.png",
  "10-diamonds.png",
  "jack-diamonds.png",
  "queen-diamonds.png",
  "king-diamonds.png",
  "ace-hearts.png",
  "2-hearts.png",
  "3-hearts.png",
  "4-hearts.png",
  "5-hearts.png",
  "6-hearts.png",
  "7-hearts.png",
  "8-hearts.png",
  "9-hearts.png",
  "10-hearts.png",
  "jack-hearts.png",
  "queen-hearts.png",
  "king-hearts.png",
];

// create a copy of deck
let deck = defaultDeck;


// DRAG AND DROP
// select the DOM object on the page that represents the card to be dragged
let dragCard = document.querySelector(".game__card");

// select the container with the id deck
let parentDeck = document.getElementById("deck");

// attach the dragstart/dragend event handler, when the mouse clicks and when the mouse releases
dragCard.addEventListener("dragstart", dragStartHandler);
dragCard.addEventListener("dragend", dragEndHandler);

// handle the dragstart/dragend event handler
function dragStartHandler(event) {
  event.dataTransfer.setData("text/plain", event.target.class);
  setTimeout(() => {
    event.target.classList.add("hide");
  }, 0);
}
function dragEndHandler(event) {
  event.target.classList.remove("hide");
}

// target piles
let piles = document.querySelectorAll(".game__piles");

// add event listeners dragenter, dragover, dragleave, drop
piles.forEach((pile) => {
  pile.addEventListener("dragenter", dragEnterHandler);
  pile.addEventListener("dragover", dragOverHandler);
  pile.addEventListener("dragleave", dragLeaveHandler);
  pile.addEventListener("drop", dropHandler);
});

// handle the event dragenter, dragover, dragleave, drop
function dragEnterHandler(event) {
  // add the dashed border
  event.target.classList.add("drag-over");
  event.preventDefault();
}
function dragOverHandler(event) {
  // add the dashed border
  event.target.classList.add("drag-over");
  event.preventDefault();
}
function dragLeaveHandler(event) {
  // remove dashed border
  event.target.classList.remove("drag-over");
}

function dropHandler(event) {
  // remove random card from deck
  let draggedCard = deck.splice(randomIndex(), 1);
  // remove dashed border
  event.target.classList.remove("drag-over");

 
  // target discard pile
  const discard = document.querySelector("#discard");

  // select the DOM object on the page that represents the card to be dragged
  let draggable = dragCard;

  // remove card img element from pile add it to discard pile
  discard.appendChild(dragCard);

  // set the appropriate attributes
  draggable.src = `PhatDeck/img/${draggedCard}`;
  draggable.alt = `${draggedCard}`;
  // don't allow the element to be draggable
  draggable.setAttribute("draggable", false);

  // create a new card image for the pile
  // target the deck pile
  let deckPile = parentDeck;
  // create image element
  let cardsExists = document.createElement("img");

  // check if there are still cards in the deck array
  if (deck.length > 0) {
    // set appropriate attributes
    cardsExists.classList.add("game__card");
    cardsExists.src = "PhatDeck/img/card-back.png";
    cardsExists.alt = "Back of the card pile";
    cardsExists.setAttribute("draggable", true);
  
      // check if there's an img in the deck pile
    if (!deckPile.hasChildNodes()) {
      // add card image element to deck pile
      deckPile.appendChild(cardsExists);
    }
    // this happens when the deck array is empty
  } else {
    // set appropriate attributes
    cardsExists.classList.add("game__card");
    cardsExists.src = "PhatDeck/img/empty-deck.png";
    cardsExists.alt = "Empty Deck Pile";
    cardsExists.setAttribute("draggable", false);
    // replace card img element in deck pile
    deckPile.replaceWith(cardsExists);
  } 
}

// create a random number to be used as an index

function randomIndex() {
  let randomIndex = Math.floor(Math.random() * deck.length);
  return randomIndex;
}

</script>