---
import BaseLayout from "../layouts/BaseLayout.astro";
---

<BaseLayout>
  <main class="bg-background pb-8 pt-6">
    <section draggable="false" class="flex items-center justify-center">
      <img
        class="mr-2 h-8 w-8"
        draggable="false"
        src="/PhatDeck/img/question.png"
        alt="Help icon"
      />
      <p draggable="false" class="font-body text-lg">
        Pick up a card from the deck and drag it to the discard pile.
      </p>
    </section>

    <section class="flex items-center justify-center">
      <div>
        <p class="text-center font-display text-2xl font-bold">Deck</p>
        <div id="deck" class="m-4 h-[500px] w-[350px] rounded-xl border">
          <img
            id="game-card"
            class="h-[500px] w-[350px] rounded-xl shadow-lg"
            draggable="true"
            src="/PhatDeck/img/card-back.png"
            alt="Back of the card"
          />
        </div>
      </div>

      <div>
        <p
          class="items-center justify-center text-center font-display text-2xl font-bold"
        >
          Discard Pile
        </p>
        <div id="discard" class="m-4 h-[500px] w-[350px] rounded-xl border">
        </div>
      </div>
    </section>

    <section class="flex items-center justify-center">
      <button
        class="rounded-lg border bg-primary px-4 py-2 font-display text-lg font-bold uppercase shadow-md hover:bg-secondary"
        >Reset</button
      >
    </section>
  </main>
</BaseLayout>

<script is:inline>
  const defaultDeck = [
    "ace-spade.png",
    "2-spade.png",
    "3-spade.png",
    "4-spade.png",
    "5-spade.png",
    "6-spade.png",
    "7-spade.png",
    "8-spade.png",
    "9-spade.png",
    "10-spade.png",
    "jack-spade.png",
    "queen-spade.png",
    "king-spade.png",
    "ace-clover.png",
    "2-clover.png",
    "3-clover.png",
    "4-clover.png",
    "5-clover.png",
    "6-clover.png",
    "7-clover.png",
    "8-clover.png",
    "9-clover.png",
    "10-clover.png",
    "jack-clover.png",
    "queen-clover.png",
    "king-clover.png",
    "ace-diamonds.png",
    "2-diamonds.png",
    "3-diamonds.png",
    "4-diamonds.png",
    "5-diamonds.png",
    "6-diamonds.png",
    "7-diamonds.png",
    "8-diamonds.png",
    "9-diamonds.png",
    "10-diamonds.png",
    "jack-diamonds.png",
    "queen-diamonds.png",
    "king-diamonds.png",
    "ace-hearts.png",
    "2-hearts.png",
    "3-hearts.png",
    "4-hearts.png",
    "5-hearts.png",
    "6-hearts.png",
    "7-hearts.png",
    "8-hearts.png",
    "9-hearts.png",
    "10-hearts.png",
    "jack-hearts.png",
    "queen-hearts.png",
    "king-hearts.png",
  ];

  // create a copy of deck
  let deck = defaultDeck;

  // DRAG AND DROP
  // select the DOM object on the page that represents the card to be dragged
  let dragCard = document.querySelector("#game-card");

  // select the container with the id deck
  const parentDeck = document.querySelector("#deck");

  // target discard pile
  const discard = document.querySelector("#discard");

  // attach the dragstart/dragend event handler, when the mouse clicks and when the mouse releases
  dragCard.addEventListener("dragstart", dragStartHandler);
  dragCard.addEventListener("dragend", dragEndHandler);

  // handle the dragstart/dragend event handler
  function dragStartHandler(event) {
    event.dataTransfer.setData("text/plain", event.target.class);
    setTimeout(() => {
      event.target.classList.add("hidden");
    }, 0);
  }
  function dragEndHandler(event) {
    event.target.classList.remove("hidden");
  }

  // add event listeners dragenter, dragover, dragleave, drop

  parentDeck.addEventListener("dragenter", dragEnterHandler);
  parentDeck.addEventListener("dragover", dragOverHandler);
  parentDeck.addEventListener("dragleave", dragLeaveHandler);
  parentDeck.addEventListener("drop", dropHandler);
  discard.addEventListener("dragenter", dragEnterHandler);
  discard.addEventListener("dragover", dragOverHandler);
  discard.addEventListener("dragleave", dragLeaveHandler);
  discard.addEventListener("drop", dropHandler);

  // handle the event dragenter, dragover, dragleave, drop
  function dragEnterHandler(event) {
    // add the dashed border
    event.target.classList.add("border-dashed", "border-2");
    event.preventDefault();
  }
  function dragOverHandler(event) {
    // add the dashed border
    event.target.classList.add("border-dashed", "border-2");
    event.preventDefault();
  }
  function dragLeaveHandler(event) {
    // remove dashed border
    event.target.classList.remove("border-dashed", "border-2");
  }

  function dropHandler(event) {
    // remove random card from deck
    let draggedCard = deck.splice(randomIndex(), 1);
    // remove dashed border
    event.target.classList.remove("border-dashed", "border-2");

    // select the DOM object on the page that represents the card to be dragged
    let draggable = dragCard;

    // remove card img element from pile add it to discard pile
    discard.appendChild(dragCard);

    // set the appropriate attributes
    draggable.src = `/PhatDeck/img/${draggedCard}`;
    draggable.alt = `${draggedCard}`;
    // don't allow the element to be draggable
    draggable.setAttribute("draggable", false);

    // create a new card image for the pile
    // target the deck pile
    let deckPile = parentDeck;
    // create image element
    let cardsExists = document.createElement("img");

    // check if there are still cards in the deck array
    if (deck.length > 0) {
      // set appropriate attributes
      cardsExists.classList.add(
        "h-[500px]",
        "w-[350px]",
        "rounded-xl",
        "shadow-lg",
      );
      cardsExists.src = "/PhatDeck/img/card-back.png";
      cardsExists.alt = "Back of the card pile";
      cardsExists.setAttribute("draggable", true);

      // check if there's an img in the deck pile
      if (!deckPile.hasChildNodes()) {
        // add card image element to deck pile
        deckPile.appendChild(cardsExists);
      }
      // this happens when the deck array is empty
    } else {
      // set appropriate attributes
      cardsExists.classList.add(
        "h-[500px]",
        "w-[350px]",
        "rounded-xl",
        "shadow-lg",
      );
      cardsExists.src = "/PhatDeck/img/empty-deck.png";
      cardsExists.alt = "Empty Deck Pile";
      cardsExists.setAttribute("draggable", false);
      // replace card img element in deck pile
      deckPile.replaceWith(cardsExists);
    }
  }

  // create a random number to be used as an index

  function randomIndex() {
    let randomIndex = Math.floor(Math.random() * deck.length);
    return randomIndex;
  }
</script>
